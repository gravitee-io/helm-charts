apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: {{ template "gravitee.name" . }}
    component: "{{ .Values.api.name }}"
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
  name: {{ template "gravitee.api.fullname" . }}
data:
  gravitee.yml: |
    management:
      type: mongodb
      mongodb:
        uri: mongodb://{{ .Values.mongo.dbhost }}:{{ .Values.mongo.dbport }}/{{ .Values.mongo.dbname }}{{- if .Values.mongo.rsEnabled }}?replicaSet={{ .Values.mongo.rs }}{{- end }}
    services:
      core:
      http:
        enabled: true
        port: 18083
        host: localhost
        authentication:
          type: basic
          users:
            admin: adminadmin
    analytics:
      type: elasticsearch
      elasticsearch:
        endpoints:
          - {{ .Values.es.protocol }}://{{ .Values.es.host }}:{{ .Values.es.port }}
        index: {{ .Values.es.index }}
        cluster: {{ .Values.es.cluster }}
    security:
      providers:  # authentication providers
        - type: gravitee
        {{- if .Values.oauth.enabled }}
        - type: oauth2
          clientId: {{ .Values.oauth.clientId }}
          clientSecret: {{ .Values.oauth.clientSecret }}
          tokenEndpoint: {{ .Values.oauth.tokenEndpoint }}
          userInfoEndpoint: {{ .Values.oauth.userInfoEndpoint }}
          accessTokenProperty: access_token
          authorizationHeader: "Bearer %s"
          mapping:
            id: sub
            email: email
            lastname: family_name
            firstname: given_name
            picture: picture
          #  groups:
          #    - mapping:
          #      condition: "{#jsonPath(#profile, '$roles.[?(@.indexOf("USER") > -1)]') == true"
          #      values: [Example group,soft user]
        {{- end -}}
        {{- if .Values.inMemoryAuth.enabled }}
        - type: memory
          # password encoding/hashing algorithm. One of:
          # - bcrypt : passwords are hashed with bcrypt
          # - none : passwords are not hashed/encrypted
          # default value is bcrypt
          password-encoding-algo: bcrypt
          users:
            - user:
              username: user
              # Passwords are encoded using BCrypt
              # Password value: password
              password: $2a$10$9kjw/SH9gucCId3Lnt6EmuFreUAcXSZgpvAYuW2ISv7hSOhHRH1AO
              roles: MANAGEMENT:USER, PORTAL:USER
            - user:
              username: admin
              # Password value: admin
              password: $2a$10$Ihk05VSds5rUSgMdsMVi9OKMIx2yUvMz7y9VP3rJmQeizZLrhLMyq
              roles: ADMIN
            - user:
              username: api1
              # Password value: api1
              password: $2a$10$iXdXO4wAYdhx2LOwijsp7.PsoAZQ05zEdHxbriIYCbtyo.y32LTji
              # You can declare multiple roles using comma separator
              roles: MANAGEMENT:API_PUBLISHER, PORTAL:API_PUBLISHER
            - user:
              username: application1
              # Password value: application1
              password: $2a$10$2gtKPYRB9zaVaPcn5RBx/.3T.7SeZoDGs9GKqbo9G64fKyXFR1He.
              roles: MANAGEMENT:USER, PORTAL:USER
          # Enable authentication using internal repository
        {{- end }}
    # SMTP configuration used to send mails
    email:
      enabled: true
      host: smtp.example.com
      subject: "[gravitee] %s"
      port: 25
      from: info@example.com
      username: info@example.com
      password: example.com
      properties:
        auth: true
        starttls.enable: false

    # Mail templates
    templates:
      path: ${gravitee.home}/templates

    jwt:
      secret: myJWT4Gr4v1t33_S3cr3t
      # Allows to define the end of validity of the token in seconds (default 604800 = a week)
      #expire-after: 604800
      # Allows to define the end of validity of the token in seconds for email registration (default 86400 = a day)
      #email-registration-expire-after: 86400
      # Allows to define issuer (default gravitee-management-auth)
      #issuer: gravitee-management-auth
      # Allows to define cookie context path (default /)
      #cookie-path: /
      # Allows to define cookie domain (default "")
      #cookie-domain: .gravitee.io
      # Allows to define if cookie secure only (default false)
      #cookie-secure: true

    swagger:
      # Default scheme used when creating an API from a Swagger descriptor if there is no scheme specified.
      scheme: https

    user:
       login:
          # Create a default application when user connects to the portal for the very first time (default true)
          #defaultApplication: true
       creation:
          # Allows to register new users from portal (default false)
          #enabled: true
          token:
             #expire-after: 86400
    # The portal URL used in emails
    portalURL: https://{{ index .Values.ui.ingress.hosts 0 }}

    # Allows to create support ticket (default value: false)
    support:
      enabled: true

    # Allows to rate an API (default value: false)
    #rating :
      #enabled: true
  {{- if .Values.api.debugEnabled }}
  logback.xml: |
    <?xml version="1.0" encoding="UTF-8"?>

    <!--
      ~ Copyright (c) 2015-2016, The Gravitee team (http://www.gravitee.io)
      ~
      ~  Licensed under the Apache License, Version 2.0 (the "License");
      ~  you may not use this file except in compliance with the License.
      ~  You may obtain a copy of the License at
      ~
      ~  http://www.apache.org/licenses/LICENSE-2.0
      ~
      ~  Unless required by applicable law or agreed to in writing, software
      ~  distributed under the License is distributed on an "AS IS" BASIS,
      ~  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      ~  See the License for the specific language governing permissions and
      ~  limitations under the License.
      -->

        <configuration>

            <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
                <!-- encoders are assigned the type
                     ch.qos.logback.classic.encoder.PatternLayoutEncoder by default -->
                <encoder>
                    <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
                </encoder>
            </appender>

            <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
                <file>${gravitee.management.log.dir}/gravitee.log</file>
                <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                    <!-- daily rollover -->
                    <fileNamePattern>${gravitee.management.log.dir}/gravitee_%d{yyyy-MM-dd}.log</fileNamePattern>

                    <!-- keep 30 days' worth of history -->
                    <maxHistory>30</maxHistory>
                </rollingPolicy>

                <encoder>
                    <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
                </encoder>
            </appender>

            <logger name="io.gravitee" level="DEBUG" />
            <logger name="org.eclipse.jetty" level="INFO" />

            <!-- Strictly speaking, the level attribute is not necessary since -->
            <!-- the level of the root level is set to DEBUG by default.       -->
            <root level="WARN">
                <appender-ref ref="STDOUT" />
                <appender-ref ref="FILE" />
            </root>

        </configuration>
  {{- end }}