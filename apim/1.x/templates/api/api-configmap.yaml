{{- if .Values.api.enabled -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "gravitee.api.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ template "gravitee.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    app.kubernetes.io/component: "{{ .Values.api.name }}"
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
data:
  gravitee.yml: |
    {{- if .Values.api.ssl.enabled }}
    jetty:
      secured: true
      ssl:
        keystore:
          {{- if .Values.api.ssl.keystore.type }}
          type: {{ .Values.api.ssl.keystore.type }}
          {{- end }}
          path: {{ .Values.api.ssl.keystore.path }}
          password: {{ .Values.api.ssl.keystore.password | quote }}
        clientAuth: {{ .Values.api.ssl.clientAuth }}
        {{- if .Values.api.ssl.truststore }}
        truststore:
          {{- if .Values.api.ssl.truststore.type }}
          type: {{ .Values.api.ssl.truststore.type }}
          {{- end }}
          path: {{ .Values.api.ssl.truststore.path }}
          password: {{ .Values.api.ssl.truststore.password | quote }}
        {{- end }}
    {{- end }}

    management:
      type: mongodb
      mongodb:
        sslEnabled: {{ .Values.mongo.sslEnabled }}
        socketKeepAlive: {{ .Values.mongo.socketKeepAlive }}
        {{- if .Values.mongo.uri }}
        uri: {{ .Values.mongo.uri }}
        {{- else if .Values.mongo.servers }}
        servers:
          {{- .Values.mongo.servers | nindent 10 }}
        dbname: {{ .Values.mongo.dbname }}
        {{- if (eq .Values.mongo.auth.enabled true) }}
        username: {{ .Values.mongo.auth.username }}
        password: {{ .Values.mongo.auth.password }}
        {{- end }}
        {{- else }}
        uri: mongodb://{{- if (eq .Values.mongo.auth.enabled true) }}{{ .Values.mongo.auth.username }}:{{ .Values.mongo.auth.password }}@{{- end }}{{ .Values.mongo.dbhost }}:{{ .Values.mongo.dbport }}/{{ .Values.mongo.dbname }}?{{- if .Values.mongo.rsEnabled }}&replicaSet={{ .Values.mongo.rs }}{{- end }}{{- if (eq .Values.mongo.auth.enabled true) }}&authSource={{ .Values.mongo.auth.source }}{{- end }}{{- if .Values.mongo.connectTimeoutMS }}&connectTimeoutMS={{ .Values.mongo.connectTimeoutMS }}{{- end }}
        {{- end }}
    services:
      core:
        http: 
          enabled: true
          port: {{ .Values.api.http.services.core.http.port |default "18083" }}
          host: {{ .Values.api.http.services.core.http.host |default "localhost" }}
          authentication:
            type: basic
            users:
              admin: {{ .Values.api.http.services.core.http.authentication.password }}
    {{- if and .Values.api.http .Values.api.http.client }}
    httpClient:
      {{- if .Values.api.http.client.timeout }}
      timeout: {{ .Values.api.http.client.timeout }}
      {{- end }}
      {{- if .Values.api.http.client.proxy }}
      proxy:
        type: {{ .Values.api.http.client.proxy.type }}
        {{- if .Values.api.http.client.proxy.http }}
        http:
          host: {{ .Values.api.http.client.proxy.http.host }}
          port: {{ .Values.api.http.client.proxy.http.port }}
          {{- if or .Values.api.http.client.proxy.http.username .Values.api.http.client.proxy.http.password }}
          username: {{ .Values.api.http.client.proxy.http.username }}
          password: {{ .Values.api.http.client.proxy.http.password }}
          {{- end }}
        {{- end }}
        {{- if .Values.api.http.client.proxy.https }}
        https:
          host: {{ .Values.api.http.client.proxy.https.host }}
          port: {{ .Values.api.http.client.proxy.https.port }}
          {{- if or .Values.api.http.client.proxy.https.username .Values.api.http.client.proxy.https.password }}
          username: {{ .Values.api.http.client.proxy.https.username }}
          password: {{ .Values.api.http.client.proxy.https.password }}
          {{- end }}
        {{- end }}
      {{- end }}
    {{- end }}

    {{- if and .Values.api.http .Values.api.http.api }}
    http:
      api:
        entrypoint: {{ .Values.api.http.api.entrypoint }}
    {{- end }}

    analytics:
      type: elasticsearch
      elasticsearch:
        {{- with .Values.es.endpoints }}
        endpoints:
          {{ toYaml . | nindent 10 | trim -}}
        {{- end }}
        {{- if (eq .Values.es.security.enabled true) }}
        security:
          username: {{ .Values.es.security.username }}
          password: {{ .Values.es.security.password }}
        {{- end }}
        {{- if (eq .Values.es.ssl.enabled true) }}
        ssl:
          keystore:
            type: {{ .Values.es.ssl.keystore.type }}
            {{- if or .Values.es.ssl.keystore.path .Values.es.ssl.keystore.password }}
            path: {{ .Values.es.ssl.keystore.path }}
            password: {{ .Values.es.ssl.keystore.password }}
            {{- end }}
            {{- if or .Values.es.ssl.keystore.certs .Values.es.ssl.keystore.keys }}
            certs: {{ .Values.es.ssl.keystore.certs }}
            keys: {{ .Values.es.ssl.keystore.keys }}
            {{- end }}
        {{- end }}
        index: {{ .Values.es.index }}
    security:
      providers:
        - type: gravitee
        {{- if .Values.inMemoryAuth.enabled }}
        - type: memory
          # password encoding/hashing algorithm. One of:
          # - bcrypt : passwords are hashed with bcrypt
          # - none : passwords are not hashed/encrypted
          # default value is bcrypt
          password-encoding-algo: bcrypt
          allow-email-in-search-results: {{ .Values.inMemoryAuth.allowEmailInSearchResults }}
          users:
            - user:
              username: admin
              password: {{ .Values.adminPasswordBcrypt }}
              roles: MANAGEMENT:ADMIN, PORTAL:ADMIN
              email: {{ .Values.adminEmail }}
              firstName: {{ .Values.adminFirstName }}
              lastName: {{ .Values.adminLastName }}
          {{- if .Values.extraInMemoryUsers -}}
          {{ .Values.extraInMemoryUsers | nindent 12 }}
          {{- end -}}
        {{- end }}
        {{- if .Values.ldap.enabled }}
        - type: ldap
          context:
            username: {{ .Values.ldap.context.user | quote }}
            password: {{ .Values.ldap.context.password | quote }}
            url: {{ .Values.ldap.context.url | quote }}
            base: {{ .Values.ldap.context.base | quote }}
          authentication:
            user: 
              base: {{ .Values.ldap.authentication.user.base | quote }}
              filter: {{ .Values.ldap.authentication.user.filter | quote }}
              {{- if .Values.ldap.authentication.user.photo }}
              photo-attribute: {{ .Values.ldap.authentication.user.photo | quote }}
              {{- end }}
            group:
              base: {{ .Values.ldap.authentication.group.base | quote }} 
              filter: {{ .Values.ldap.authentication.group.filter | quote }} 
              role:
                attribute: {{ .Values.ldap.authentication.group.role.attribute | quote }}
                mapper: {
                  {{ .Values.ldap.authentication.group.role.consumer }}: API_CONSUMER,
                  {{ .Values.ldap.authentication.group.role.publisher }}: API_PUBLISHER,
                  {{ .Values.ldap.authentication.group.role.admin }}: ADMIN,
                  {{ .Values.ldap.authentication.group.role.user }}: USER
                }
          lookup:
            allow-email-in-search-results: {{ .Values.ldap.lookup.allowEmailInSearchResults }}
            user:
              base: {{ .Values.ldap.lookup.user.base | quote }} 
              filter: {{ .Values.ldap.lookup.user.filter | quote }} 
        {{- end }}
    # SMTP configuration used to send mails
    email:
      enabled: {{ .Values.smtp.enabled }}
      {{- if .Values.smtp.enabled }} 
      host: {{ .Values.smtp.host }}
      subject: {{ .Values.smtp.subject | quote }}
      port: {{ .Values.smtp.port }}
      from: {{ .Values.smtp.from }}
      {{- if or .Values.smtp.username .Values.smtp.password }}
      username: {{ .Values.smtp.username }}
      password: {{ .Values.smtp.password }}
      {{- end }}
      properties:
        auth: {{ .Values.smtp.properties.auth }}
        starttls.enable: {{ .Values.smtp.properties.starttlsEnable }}
        {{- if .Values.smtp.properties.localhost }}
        localhost: {{ .Values.smtp.properties.localhost }}
        {{- end }}
      {{- end }}

    # Mail templates
    templates:
      path: ${gravitee.home}/templates

    jwt:
      secret: {{ .Values.jwtSecret }}
      # Allows to define the end of validity of the token in seconds (default 604800 = a week)
      #expire-after: 604800
      # Allows to define the end of validity of the token in seconds for email registration (default 86400 = a day)
      #email-registration-expire-after: 86400
      # Allows to define issuer (default gravitee-management-auth)
      #issuer: gravitee-management-auth
      # Allows to define cookie context path (default /)
      #cookie-path: /
      # Allows to define cookie domain (default "")
      #cookie-domain: .gravitee.io
      # Allows to define if cookie secure only (default false)
      #cookie-secure: true

    swagger:
      # Default scheme used when creating an API from a Swagger descriptor if there is no scheme specified.
      scheme: https

    user:
      login:
        # Create a default application when user connects to the portal for the very first time (default true)
        defaultApplication: {{ .Values.api.user.login.defaultApplication }}
      creation:
        # Allows to register new users from portal (default false)
        #enabled: true
        token:
          #expire-after: 86400
        anonymize-on-delete:
          enabled: {{ .Values.api.user.anynomizeOnDelete }}
    # The portal URL used in emails
    {{- if .Values.api.portalURL }}
    portalURL: {{ .Values.api.portalURL }}
    {{- else }}
    portalURL: https://{{ index .Values.ui.ingress.hosts 0 }}
    {{- end }}

    # Allows to create support ticket (default value: false)
    support:
      enabled: {{ .Values.api.supportEnabled }}

    # Allows to rate an API (default value: false)
    rating :
      enabled: {{ .Values.api.ratingEnabled }}
  {{- if .Values.api.logging.debug }}
  logback.xml: |
    <?xml version="1.0" encoding="UTF-8"?>

    <!--
      ~ Copyright (c) 2015-2016, The Gravitee team (http://www.gravitee.io)
      ~
      ~  Licensed under the Apache License, Version 2.0 (the "License");
      ~  you may not use this file except in compliance with the License.
      ~  You may obtain a copy of the License at
      ~
      ~  http://www.apache.org/licenses/LICENSE-2.0
      ~
      ~  Unless required by applicable law or agreed to in writing, software
      ~  distributed under the License is distributed on an "AS IS" BASIS,
      ~  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      ~  See the License for the specific language governing permissions and
      ~  limitations under the License.
      -->

        <configuration>

            <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
                <!-- encoders are assigned the type
                    ch.qos.logback.classic.encoder.PatternLayoutEncoder by default -->
                <encoder>
                    <pattern>{{ .Values.api.logging.stdout.encoderPattern }}</pattern>
                </encoder>
            </appender>

            {{- if .Values.api.logging.file.enabled }}
            <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
                <file>${gravitee.management.log.dir}/gravitee.log</file>
{{ .Values.api.logging.file.rollingPolicy | indent 16 }}
                <encoder>
                    <pattern>{{ .Values.api.logging.file.encoderPattern }}</pattern>
                </encoder>
            </appender>
            {{- end }}

            <logger name="io.gravitee" level="{{ .Values.api.logging.graviteeLevel }}" />
            <logger name="org.eclipse.jetty" level="{{ .Values.api.logging.jettyLevel }}" />

            <!-- Strictly speaking, the level attribute is not necessary since -->
            <!-- the level of the root level is set to DEBUG by default.       -->
            <root level="WARN">
                <appender-ref ref="STDOUT" />
                {{- if .Values.api.logging.file.enabled }}
                <appender-ref ref="FILE" />
                {{- end }}
            </root>

        </configuration>
  {{- end }}
{{- end -}}
