# Default values for gravitee.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
cockpit:
  name: cockpit
  # Whether this chart should self-manage its service account, role, and associated role binding.
  managedServiceAccount: true

  # Custom service account override that the pod will use
  serviceAccount: ""

  # Annotations to add to the ServiceAccount that is created if the serviceAccount value isn't set.
  serviceAccountAnnotations: {}

  clusterRoleRules:
    - apiGroups:
        - ""
      resources:
        - endpoints
        - pods
        - nodes
        - services
        - configmaps
        - secrets
      verbs:
        - get
        - list
        - watch

chaos:
  enabled: false

smtp:
  enabled: true
  host: smtp.example.com
  port: 25
  from: info@example.com
  username: info@example.com
  password: example.com
  subject: "[gravitee] %s"
  properties:
    auth: true
    starttls.enable: false
    #localhost: apim.example.com

authentication:
  github:
    clientId:
    clientSecret:
    userAutorizationUri: https://github.com/login/oauth/authorize
    accessTokenUri: https://github.com/login/oauth/access_token
    userProfileUri: https://api.github.com/user
    codeParameter: code
    responseType: code
  google:
    clientId:
    clientSecret:
    userAutorizationUri: https://accounts.google.com/o/oauth2/v2/auth
    accessTokenUri: https://oauth2.googleapis.com/token
    userProfileUri: https://openidconnect.googleapis.com/v1/userinfo
    codeParameter: code
    responseType: code
    scopes: openid,profile,email
  oidc:
    clientId:
    clientSecret:
    codeParameter: code
    responseType: code
    scopes: openid,profile,email

mongo:
  # uri: mongodb://mongo-mongodb-replicaset:27017/gravitee?connectTimeoutMS=30000
  # servers: |
  #   - host: mongo1
  #     port: 27017
  #   - host: mongo2
  #     port: 27017
  sslEnabled: false
  socketKeepAlive: false
  rs: rs0
  rsEnabled: true
  dbhost: graviteeio-apim-mongodb-replicaset
  dbname: gravitee
  dbport: 27017
  connectTimeoutMS: 30000
  auth:
    enabled: false
    source: admin
    username:
    password:

mongodb-replicaset:
  enabled: false
  replicas: 3
  replicaSetName: rs0
  auth:
    enabled: false
    adminUser: username
    adminPassword: password
    metricsUser: metrics
    metricsPassword: password
    key: keycontent
    # existingKeySecret:
    # existingAdminSecret:
    # existingMetricsSecret:
  image:
    repository: mongo
    tag: 3.6
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi
  persistentVolume:
    enabled: true
    # storageClass: "-"
    accessModes:
      - ReadWriteOnce
    size: 1Gi
  configmap: {}

api:
  enabled: true
  name: api
  logging:
    stdout:
      encoderPattern: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file:
      enabled: false
    graviteeLevel: INFO
    jettyLevel: INFO
  restartPolicy: OnFailure
  reloadOnConfigChange: true

  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  replicaCount: 1
  image:
    repository: graviteeio/cockpit-management-api
    # tag: 3.0.0
    pullPolicy: Always
    # pullSecrets:
    #   - name: gravitee_secrets

  deployment:
    # Annotations to apply to the deployment
    annotations: {}
    # additionals labels
    labels: {}
    affinity: {}
    hostAliases: []
    #- ip: "127.0.0.1"
    #  hostnames:
    #  - "foo.local"
    #  - "bar.local"
    nodeSelector: {}
    tolerations: []
    envFrom: []
    # - configMapRef:
    #     name: config-secret
    securityContext:
      runAsUser: 1001
      runAsNonRoot: true
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxUnavailable: 1
    topologySpreadConstraints: []

  livenessProbe:
    tcpSocket:  
      port: api-http
    initialDelaySeconds: 30
    periodSeconds: 30
    failureThreshold: 3

  readinessProbe:
    tcpSocket:
      port: api-http
    initialDelaySeconds: 30
    periodSeconds: 30
    failureThreshold: 3

  pdb:
    enabled: false
    minAvailable: ""
    maxUnavailable: "50%"

  podAnnotations: {}
    # iam.amazonaws.com/role: es-cluster

  # How long to wait for Cockpit Management API pods to stop gracefully
  terminationGracePeriod: 30

  # This is the PriorityClass settings as defined in
  # https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
  priorityClassName: ""

  env: []
  #   - name: ENV_VARIABLE
  #     value: ENV_VARIABLE_VALUE
  #   - name: ENV_VARIABLE_WITH_FROM
  #     valueFrom:
  #       configMapKeyRef:
  #         name: special-config
  #         key: SPECIAL_LEVEL

  ssl:
    enabled: false
  #  keystore:
  #    type: jks # Supports jks, pkcs12
  #    path: ${gravitee.home}/security/keystore.jks
  #    password: secret
  #  truststore:
  #    type: jks # Supports jks, pkcs12
  #    path: ${gravitee.home}/security/truststore.jks
  #    password: secret
  jwt:
    secret: ybbrZDZmjnzWhstP8xv2SQL28AdHuNah
  platform:
    admin:
      password: $2a$10$YCR.gYLmG8TzKSg5TYxdzeJOpMGpEavOCni5sbHukD2qwwZxhuXvO
  http:
    port: 8063
    services:
      core:
        http:
          port: 18063
          host: localhost
          authentication:
            password: adminadmin  
        ingress:
          enabled: false
          ingressClassName: ""
#          path: /management/_(.*)
#          hosts:
#            - apim.example.com
#          annotations:
#            kubernetes.io/ingress.class: nginx
#            nginx.ingress.kubernetes.io/rewrite-target: /_$1
        service: 
#       If you choose to enable this service, you'll need to expose the technical api
#       on an accessible host outside of the pod: api.http.services.core.http.host
          enabled: false
          internalPortName: api-technical
          externalPort: 18063

  reCaptcha:
    enabled: false
#    serviceUrl:
#    siteKey:
#    secretKey:
#    minScore:

  email:
    notifications:
#      enabled: false
#      recipient:

  controller:
    compatibleVersions:
      apim: "3.6.2"
      am: "3.7.0"
      connector: "1.2.0"
    ws:
      enabled: true
      port: 8062
      ingress:
        enabled: true
        ingressClassName: ""
        # For ssl-passthrough support, the path must be /
        path: /
        hosts:
          - cockpit-controller.example.com
        annotations:
          kubernetes.io/ingress.class: nginx
          nginx.ingress.kubernetes.io/ssl-passthrough: "true"
          nginx.ingress.kubernetes.io/ssl-redirect: "true"
#       tls:
        # Secrets must be manually created in the namespace.
#       - secretName: chart-example-tls
#         hosts:
#           - chart-example.local
        tls:
          - hosts:
              - cockpit-controller.example.com
            secretName: api-custom-cert
      service:
        enabled: true
        externalPort: 8062
        internalPortName: api-ws

  service:
    type: ClusterIP
    externalPort: 8063
    internalPortName: api-http

  # annotations:
  securityContext:
    runAsUser: 1001
    runAsNonRoot: true
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 3
    targetAverageUtilization: 50
    targetMemoryAverageUtilization: 80
  ingress:
    enabled: true
    ingressClassName: ""
    path: /management
    # Used to create an Ingress record.
    hosts:
      - cockpit.example.com
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/configuration-snippet: "etag on;\nproxy_pass_header ETag;\nproxy_set_header if-match \"\";\n"
      nginx.ingress.kubernetes.io/eventsource: true
      nginx.ingress.kubernetes.io/proxy-read-timeout: 21600
      # kubernetes.io/tls-acme: "true"
    #tls:
      # Secrets must be manually created in the namespace.
      # - secretName: chart-example-tls
      #   hosts:
      #     - chart-example.local
    tls:
      - hosts:
          - cockpit.example.com
        secretName: api-custom-cert
  resources:
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    limits:
      cpu: 500m
      memory: 1024Mi
    requests:
      cpu: 200m
      memory: 512Mi
    #  lifecycle:
    #    postStart: '[ "/bin/sh", "-c", "echo Post starting Gravitee Management API" ]'
    #    preStop: '[ "/bin/sh", "-c", "echo Pre stopping Gravitee Management API" ]'
    ## Additional gravitee API volume mounts
    # Defines additional volume mounts.
    # extraVolumeMounts: |
    # - name: extra-volume
    #   mountPath: /mnt/volume
    #   readOnly: true
    #   existingClaim: volume-claim
  initialPlans:
    small:
      name: 'Small'
      maxEnvs: 2
      isDefault: 'true'
      dataRetentionDuration: 1
      maxDesignerModelsCount: 1
    medium:
      name: 'Medium'
      maxEnvs: 4
      dataRetentionDuration: 30
      maxDesignerModelsCount: 1
    large:
      name: 'Large'
      maxEnvs: -1
      dataRetentionDuration: 182
      maxDesignerModelsCount: 1
  services:
    healthCheckPurge:
      cron: "0 0 0 */1 * *"
      onPremise:
        dataRetentionDuration: -1

ui:
  enabled: true
  name: ui
  replicaCount: 1
  image:
    repository: graviteeio/cockpit-management-ui
    # tag: 3.0.0
    pullPolicy: Always
  # pullSecrets:
  #   - name: gravitee_secrets
  deployment:
    # Annotations to apply to the deployment
    annotations: {}
    # additionals labels
    labels: {}
    affinity: {}
    hostAliases: []
    #- ip: "127.0.0.1"
    #  hostnames:
    #  - "foo.local"
    #  - "bar.local"
    nodeSelector: {}
    tolerations: []
    envFrom: []
    # - configMapRef:
    #     name: config-secret
    securityContext:
      runAsUser: 101
      runAsGroup: 101
      runAsNonRoot: true
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxUnavailable: 1
    topologySpreadConstraints: []

  livenessProbe:
    httpGet:
      path: /
      port: ui-http
    initialDelaySeconds: 10
    periodSeconds: 30
    failureThreshold: 3

  readinessProbe:
    httpGet:
      path: /
      port: ui-http
    initialDelaySeconds: 10
    periodSeconds: 30
    failureThreshold: 3

  pdb:
    enabled: false
    minAvailable: ""
    maxUnavailable: "50%"

  podAnnotations: {}
    # iam.amazonaws.com/role: es-cluster 

  # How long to wait for Coockpit Console pods to stop gracefully
  terminationGracePeriod: 30

  # This is the PriorityClass settings as defined in
  # https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
  priorityClassName: ""

  env: []
  #   - name: ENV_VARIABLE
  #     value: ENV_VARIABLE_VALUE
  #   - name: ENV_VARIABLE_WITH_FROM
  #     valueFrom:
  #       configMapKeyRef:
  #         name: special-config
  #         key: SPECIAL_LEVEL
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 3
    targetAverageUtilization: 50
    targetMemoryAverageUtilization: 80
  service:
    name: nginx
    type: ClusterIP
    externalPort: 8002
    internalPort: 8080
    internalPortName: ui-http
  # annotations:
  securityContext:
    runAsUser: 101
    runAsGroup: 101
    runAsNonRoot: true
  ingress:
    enabled: true
    ingressClassName: ""
    path: /
    # Used to create an Ingress record.
    hosts:
      - cockpit.example.com
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/configuration-snippet: "etag on;\nproxy_pass_header ETag;\n"
      #tls:
      # Secrets must be manually created in the namespace.
      # - secretName: chart-example-tls
      #   hosts:
      #     - chart-example.local
    tls:
      - hosts:
          - cockpit.example.com
        secretName: api-custom-cert
  resources:
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 64Mi
    #  lifecycle:
    #    postStart: '[ "/bin/sh", "-c", "echo Post starting Gravitee UI" ]'
    #    preStop: '[ "/bin/sh", "-c", "echo Pre stopping Gravitee UI" ]'
    ## Additional gravitee ui volume mounts
    # Defines additional volume mounts.
    # extraVolumeMounts: |
    # - name: extra-volume
    #   mountPath: /mnt/volume
    #   readOnly: true

generator:
  enabled: true
  name: swagger-generator
  restartPolicy: OnFailure
  reloadOnConfigChange: true
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  replicaCount: 1
  image:
    repository: graviteeio/cockpit-swagger-generator
    # tag: 1.0.0
    pullPolicy: Always
    # pullSecrets:
    #   - name: gravitee_secrets

  deployment:
    # Annotations to apply to the deployment
    annotations: {}
    # additionals labels
    labels: {}
    affinity: {}
    hostAliases: []
    #- ip: "127.0.0.1"
    #  hostnames:
    #  - "foo.local"
    #  - "bar.local"
    nodeSelector: {}
    tolerations: []
    envFrom: []
    # - configMapRef:
    #     name: config-secret
    securityContext:
      runAsUser: 1001
      runAsNonRoot: true
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxUnavailable: 1
    topologySpreadConstraints: []

  env: []
  #   - name: ENV_VARIABLE
  #     value: ENV_VARIABLE_VALUE
  #   - name: ENV_VARIABLE_WITH_FROM
  #     valueFrom:
  #       configMapKeyRef:
  #         name: special-config
  #         key: SPECIAL_LEVEL

  apiKey: api_key_value
  license:
    key: license_value
    expirationDate: license_expiration_date

  service:
    type: ClusterIP
    externalPort: 84
    internalPort: 3003
    internalPortName: generator-http
  # annotations:
  securityContext:
    runAsUser: 1001
    runAsNonRoot: true
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 1
    targetAverageUtilization: 50
    targetMemoryAverageUtilization: 80

  livenessProbe:
    tcpSocket:
      port: generator-http
    initialDelaySeconds: 15
    periodSeconds: 30
    failureThreshold: 3

  readinessProbe:
    tcpSocket:
      port: generator-http
    initialDelaySeconds: 15
    periodSeconds: 30
    failureThreshold: 3

  pdb:
    enabled: false
    minAvailable: ""
    maxUnavailable: "50%"

  podAnnotations: { }
  # iam.amazonaws.com/role: es-cluster

  # How long to wait for Swagger Generator API pods to stop gracefully
  terminationGracePeriod: 30

  # This is the PriorityClass settings as defined in
  # https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
  priorityClassName: ""

  resources:
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    limits:
      cpu: 500m
      memory: 1024Mi
    requests:
      cpu: 200m
      memory: 256Mi
    #  lifecycle:
    #    postStart: '[ "/bin/sh", "-c", "echo Post starting Gravitee Designer Generator" ]'
    #    preStop: '[ "/bin/sh", "-c", "echo Pre stopping Gravitee Designer Generator" ]'
    ## Additional gravitee API volume mounts
    # Defines additional volume mounts.
    # extraVolumeMounts: |
    # - name: extra-volume
    #   mountPath: /mnt/volume
    #   readOnly: true
    #   existingClaim: volume-claim
