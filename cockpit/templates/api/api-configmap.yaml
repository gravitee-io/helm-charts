{{- if and (.Values.api.enabled) (not (include "api.externalConfig" .)) -}}

{{- $clusterversion := default "0" .Release.Revision | toString -}}
{{- if eq $clusterversion "1"  -}}
  {{- $clusterversion = .Values.api.image.tag | default .Chart.AppVersion | sha1sum | substr 0 8 -}}
{{- end -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "gravitee.api.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ template "gravitee.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Values.api.image.tag | default .Chart.AppVersion | quote }}
    app.kubernetes.io/component: "{{ .Values.api.name }}"
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
data:
  gravitee.yml: |
    jetty:
      port: 8063
    {{- if .Values.api.ssl.enabled }}
      secured: true
      ssl:
        keystore:
          {{- if .Values.api.ssl.keystore.type }}
          type: {{ .Values.api.ssl.keystore.type }}
          {{- end }}
          path: {{ .Values.api.ssl.keystore.path }}
          password: {{ .Values.api.ssl.keystore.password | quote }}
        clientAuth: {{ .Values.api.ssl.clientAuth }}
        {{- if .Values.api.ssl.truststore }}
        truststore:
          {{- if .Values.api.ssl.truststore.type }}
          type: {{ .Values.api.ssl.truststore.type }}
          {{- end }}
          path: {{ .Values.api.ssl.truststore.path }}
          password: {{ .Values.api.ssl.truststore.password | quote }}
        {{- end }}
    {{- end }}

    management:
      type: mongodb
      mongodb:
        sslEnabled: {{ .Values.mongo.sslEnabled }}
        socketKeepAlive: {{ .Values.mongo.socketKeepAlive }}
        {{- if .Values.mongo.uri }}
        uri: {{ .Values.mongo.uri }}
        {{- else if .Values.mongo.servers }}
        servers:
          {{- .Values.mongo.servers | nindent 10 }}
        dbname: {{ .Values.mongo.dbname }}
        {{- if (eq .Values.mongo.auth.enabled true) }}
        username: {{ .Values.mongo.auth.username }}
        password: {{ .Values.mongo.auth.password }}
        {{- end }}
        {{- else }}
        uri: mongodb://{{- if (eq .Values.mongo.auth.enabled true) }}{{ .Values.mongo.auth.username }}:{{ .Values.mongo.auth.password }}@{{- end }}{{ .Values.mongo.dbhost }}:{{ .Values.mongo.dbport }}/{{ .Values.mongo.dbname }}?{{- if .Values.mongo.rsEnabled }}&replicaSet={{ .Values.mongo.rs }}{{- end }}{{- if (eq .Values.mongo.auth.enabled true) }}&authSource={{ .Values.mongo.auth.source }}{{- end }}{{- if .Values.mongo.connectTimeoutMS }}&connectTimeoutMS={{ .Values.mongo.connectTimeoutMS }}{{- end }}
        {{- end }}

    {{- if .Values.generator.enabled }}
    swaggerGenerator:
      url: http://{{ template "gravitee.generator.fullname" . }}:{{ .Values.generator.service.externalPort }}
      apiKey: {{ .Values.generator.apiKey }}
    {{- end }}

    services:
    {{- with .Values.api.notifiers }}
    {{- if .enabled }}
      notifier:
        enabled: true
        tryAvoidDuplicateNotification: {{ .tryAvoidDuplicateNotification }}
    {{- end }}
    {{- end }}
      core:
        http: 
          enabled: true
          port: {{ .Values.api.http.services.core.http.port |default "18063" }}
          host: {{ .Values.api.http.services.core.http.host |default "localhost" }}
          authentication:
            type: basic
            users:
              admin: {{ .Values.api.http.services.core.http.authentication.password }}
      {{- if .Values.api.services.healthCheckPurge }}
      healthCheckPurge:
{{ toYaml .Values.api.services.healthCheckPurge | indent 8}}
      {{- end }}

    {{- if and .Values.api.http .Values.api.http.client }}
    httpClient:
      {{- if .Values.api.http.client.timeout }}
      timeout: {{ .Values.api.http.client.timeout }}
      {{- end }}
      {{- if .Values.api.http.client.proxy }}
      proxy:
        type: {{ .Values.api.http.client.proxy.type }}
        {{- if .Values.api.http.client.proxy.http }}
        http:
          host: {{ .Values.api.http.client.proxy.http.host }}
          port: {{ .Values.api.http.client.proxy.http.port }}
          {{- if or .Values.api.http.client.proxy.http.username .Values.api.http.client.proxy.http.password }}
          username: {{ .Values.api.http.client.proxy.http.username }}
          password: {{ .Values.api.http.client.proxy.http.password }}
          {{- end }}
        {{- end }}
        {{- if .Values.api.http.client.proxy.https }}
        https:
          host: {{ .Values.api.http.client.proxy.https.host }}
          port: {{ .Values.api.http.client.proxy.https.port }}
          {{- if or .Values.api.http.client.proxy.https.username .Values.api.http.client.proxy.https.password }}
          username: {{ .Values.api.http.client.proxy.https.username }}
          password: {{ .Values.api.http.client.proxy.https.password }}
          {{- end }}
        {{- end }}
      {{- end }}
    {{- end }}

    {{- if and .Values.api.http .Values.api.http.api }}
    http:
      api:
        entrypoint: {{ .Values.api.http.api.entrypoint }}
    {{- end }}

    reCaptcha:
    {{- if .Values.api.reCaptcha.enabled }}
{{ toYaml .Values.api.reCaptcha | indent 6 }}
    {{ else }}
      enabled: false
    {{- end }}

    controller:
      {{- if .Values.api.controller.compatibleVersions }}
      compatible-versions:
{{ toYaml .Values.api.controller.compatibleVersions | indent 8 }}
      {{- end }}

    email:
      enabled: {{ .Values.smtp.enabled }}
      {{- if .Values.smtp.enabled }} 
      host: {{ .Values.smtp.host }}
      subject: {{ .Values.smtp.subject | quote }}
      port: {{ .Values.smtp.port }}
      from: {{ .Values.smtp.from }}
      {{- if or .Values.smtp.username .Values.smtp.password }}
      username: {{ .Values.smtp.username }}
      password: {{ .Values.smtp.password }}
      {{- end }}
      properties:
        {{- range $key, $val := .Values.smtp.properties }}
        {{ $key }} : {{ $val | quote }}
        {{- end }}
      {{- end }}
      {{- if .Values.api.email.notifications }}
      notifications:
{{ toYaml .Values.api.email.notifications | indent 8 }}
      {{- end }}

  {{- with .Values.api.notifiers }}
  {{- if .enabled }}

    notifiers:
      email:
        host: {{ .email.host }}
        port: {{ .email.port }}
        username: {{ .email.username }}
        subject: {{ .email.subject | quote }}
        password: {{ .email.password }}
        from: {{ .email.from }}
      {{- if .email.startTLSEnabled }}
        startTLSEnabled: true
        {{- if hasKey .email "sslKeyStore" }}
        sslKeyStore: {{ .email.sslKeyStore }}
        {{- end }}
        {{- if hasKey .email "sslTrustAll" }}
        sslTrustAll: {{ .email.sslTrustAll }}
        {{- end }}
        {{- if hasKey .email "sslKeyStorePassword" }}
        sslKeyStorePassword: {{ .email.sslKeyStorePassword }}
        {{- end }}
      {{- end }}
  {{- end }}
  {{- end }}

    jwt:
      secret: {{ .Values.api.jwt.secret }}

    platform:
      admin:
        password: {{ .Values.api.platform.admin.password }}

    certificates:
      secret: QdjshTRmurH3YtzFCrYATkSG8H65xwah
      principal: 'EMAILADDRESS=contact@graviteesource.com, CN={accountId}, OU=Cockpit, O=GraviteeSource, L=Lille, ST=France, C=FR'
      expire-after: 31536000
      key:
        alg: RSA
        size: 4096
      signature:
        alg: SHA512WithRSA

    endpoints:
      loginPath: "/auth/cockpit?token={token}"
      apim:
        name: "GraviteeAPIManagement"
        ui: "http://localhost:3000"
        api: "http://localhost:8083/management"
      am:
        name: "GraviteeAccessManagement"
        ui: "http://localhost:4200"
        api: "http://localhost:8093/management"
      ui: "https://{{ index .Values.ui.ingress.hosts 0 }}{{ .Values.ui.ingress.path }}"
      ws: "https://{{ index .Values.api.controller.ws.ingress.hosts 0 }}{{ .Values.api.controller.ws.ingress.path }}"

    {{- if .Values.api.initialPlans }}
    initialPlans:
{{ toYaml .Values.api.initialPlans | indent 6 }}
    {{- end }}

    auth:
      callbackUrl: {{ .Values.api.ingress.path }}/auth/login/callback

      {{- if .Values.authentication.github }}
      github:
        {{- if not .Values.authentication.github.redirectUri }}
        redirectUri: https://{{ index .Values.api.ingress.hosts 0 }}{{ .Values.api.ingress.path }}/auth/login/callback?provider=github
        {{- end }}
{{ toYaml .Values.authentication.github | indent 8 }}
      {{- end }}

      {{- if .Values.authentication.google }}
      google:
        {{- if not .Values.authentication.google.redirectUri }}
        redirectUri: https://{{ index .Values.api.ingress.hosts 0 }}{{ .Values.api.ingress.path }}/auth/login/callback?provider=google
        {{- end }}
{{ toYaml .Values.authentication.google | indent 8 }}
      {{- end }}

      {{- if .Values.authentication.oidc }}
      oidc:
        {{- if not .Values.authentication.oidc.redirectUri }}
        redirectUri: https://{{ index .Values.api.ingress.hosts 0 }}{{ .Values.api.ingress.path }}/auth/login/callback?provider=oidc
        {{- end }}
{{ toYaml .Values.authentication.oidc | indent 8 }}
      {{- end }}

  hazelcast.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <hazelcast xmlns="http://www.hazelcast.com/schema/config"
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="http://www.hazelcast.com/schema/config
               http://www.hazelcast.com/schema/config/hazelcast-config-4.2.xsd">
        <cluster-name>graviteeio-cockpit</cluster-name>
        <properties>
            <property name="hazelcast.discovery.enabled">true</property>
            <property name="hazelcast.max.wait.seconds.before.join">3</property>
            <property name="hazelcast.member.list.publish.interval.seconds">5</property>
            <property name="hazelcast.socket.client.bind.any">false</property>
        </properties>

        <queue name="commands-*">
            <backup-count>0</backup-count>
            <async-backup-count>1</async-backup-count>
        </queue>

        <map name="cockpit.channels.*">
            <backup-count>0</backup-count>
            <async-backup-count>1</async-backup-count>
        </map>

        <reliable-topic name="cockpit.primaryChannels">
            <read-batch-size>10</read-batch-size>
        </reliable-topic>

        <cp-subsystem>
            <cp-member-count>0</cp-member-count>
        </cp-subsystem>

        <network>
            <join>
                <multicast enabled="false"/>
                <tcp-ip enabled="false"/>
                <kubernetes enabled="true">
                    <namespace>{{ .Release.Namespace }}</namespace>
                    <service-name>{{ template "gravitee.api.fullname" . }}</service-name>
                </kubernetes>
            </join>
        </network>
    </hazelcast>

  hazelcast.yml: |
    hazelcast:
      cluster-name: {{ .Release.Name }}_{{ $clusterversion }}
      network:
        join:
          multicast:
            enabled: false
          tcp-ip:
            enabled: false
          kubernetes:
            enabled: true
            namespace: {{ .Release.Namespace }}
            service-name: {{ template "gravitee.api.fullname" . }}

{{- if .Values.hazelcast.advancedNetwork }}
      advanced-network:
        {{- toYaml .Values.hazelcast.advancedNetwork | nindent 8 }}
{{- end }}

      properties:
        hazelcast.logging.type: slf4j
        hazelcast.max.wait.seconds.before.join: 3
        hazelcast.member.list.publish.interval.seconds: 5
        hazelcast.socket.client.bind.any: false
{{- if .Values.hazelcast.properties }}
        {{- toYaml .Values.hazelcast.properties | nindent 8 }}
{{- end }}

      cp-subsystem:
        cp-member-count: 0
      map:
        cockpit.channels.*:
          backup-count: 0
          async-backup-count: 1
      queue:
        commands-*:
          backup-count: 0
          async-backup-count: 1
      reliable-topic:
        cockpit.primaryChannels:
          read-batch-size: 10

  logback.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <!--
      ~ Copyright (c) 2015-2016, The Gravitee team (http://www.gravitee.io)
      ~
      ~  Licensed under the Apache License, Version 2.0 (the "License");
      ~  you may not use this file except in compliance with the License.
      ~  You may obtain a copy of the License at
      ~
      ~  http://www.apache.org/licenses/LICENSE-2.0
      ~
      ~  Unless required by applicable law or agreed to in writing, software
      ~  distributed under the License is distributed on an "AS IS" BASIS,
      ~  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      ~  See the License for the specific language governing permissions and
      ~  limitations under the License.
      -->

        <configuration>

            <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
              {{- if .Values.api.logging.stdout.json }}
              <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
                <layout class="ch.qos.logback.contrib.json.classic.JsonLayout">
                    <jsonFormatter
                            class="ch.qos.logback.contrib.jackson.JacksonJsonFormatter">
                    </jsonFormatter>
                    <appendLineSeparator>true</appendLineSeparator>
                    <timestampFormat>yyyy-MM-dd'T'HH:mm:ss.SSSXX</timestampFormat>
                </layout>
              </encoder>
              {{- else }}
              <encoder>
                <pattern>{{ .Values.api.logging.stdout.encoderPattern }}</pattern>
              </encoder>
              {{- end }}
            </appender>

            {{- if .Values.api.logging.file.enabled }}
            <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
                <file>${gravitee.management.log.dir}/gravitee.log</file>
{{ .Values.api.logging.file.rollingPolicy | indent 16 }}
                <encoder>
                    <pattern>{{ .Values.api.logging.file.encoderPattern }}</pattern>
                </encoder>
            </appender>
            {{- end }}

            <logger name="io.gravitee" level="{{ .Values.api.logging.graviteeLevel }}" />
            <logger name="com.graviteesource" level="{{ .Values.api.logging.graviteeLevel }}" />
            <logger name="org.eclipse.jetty" level="{{ .Values.api.logging.jettyLevel }}" />
            <logger name="com.hazelcast" level="INFO"/>
{{- if .Values.api.logging.additionalLoggers }}
{{ .Values.api.logging.additionalLoggers | indent 12 }}
{{- end }}

            <!-- Strictly speaking, the level attribute is not necessary since -->
            <!-- the level of the root level is set to DEBUG by default.       -->
            <root level="WARN">
                <appender-ref ref="STDOUT" />
                {{- if .Values.api.logging.file.enabled }}
                <appender-ref ref="FILE" />
                {{- end }}
            </root>

        </configuration>
{{- end -}}
