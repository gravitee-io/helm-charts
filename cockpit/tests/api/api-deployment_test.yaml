suite: Cockpit - API - deployment config
templates:
  - "api/api-deployment.yaml"
  - "api/api-configmap.yaml"
tests:
  - it: should generate nothing when api is disabled
    template: api/api-deployment.yaml
    set:
      api:
        enabled: false
    release:
      name: my-cockpit
      namespace: unittest
    asserts:
      - hasDocuments:
          count: 0

  - it: should apply labels
    template: api/api-deployment.yaml
    release:
      name: my-cockpit
      namespace: unittest
    chart:
      version: 1.0.0-chart
      appVersion: 1.0.0-app
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Deployment
      - equal:
          path: metadata.labels
          value:
            app.kubernetes.io/component: api
            app.kubernetes.io/instance: my-cockpit
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: cockpit
            app.kubernetes.io/version: 1.0.0-app
            helm.sh/chart: cockpit-1.0.0-chart

  - it: should generate default deployment config
    template: api/api-deployment.yaml
    release:
      name: my-cockpit
      namespace: unittest
    chart:
      version: 1.0.0-chart
      appVersion: 1.0.0-app
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Deployment
      - isEmpty:
          path: metadata.annotations
      - equal:
          path: spec.strategy
          value:
            type: RollingUpdate
            rollingUpdate:
              maxUnavailable: 1
      - equal:
          path: spec.selector
          value:
            matchLabels:
              app.kubernetes.io/component: api
              app.kubernetes.io/instance: my-cockpit
              app.kubernetes.io/name: cockpit
      - equal:
          path: spec.template.metadata
          value:
            annotations:
              chaos.alpha.kubernetes.io/enabled: "false"
              checksum/config: 299feb446a407ada859daf69a9b9e83051b9cb31bd0bf9d7f2f98eacd559ed47
            labels:
              app.kubernetes.io/component: api
              app.kubernetes.io/instance: my-cockpit
              app.kubernetes.io/name: cockpit
              app.kubernetes.io/version: 1.0.0-app
      - equal:
          path: spec.template.spec
          value:
            affinity:
              podAntiAffinity:
                preferredDuringSchedulingIgnoredDuringExecution:
                  - weight: 100
                    podAffinityTerm:
                      labelSelector:
                        matchExpressions:
                          - key: app.kubernetes.io/name
                            operator: In
                            values:
                              - cockpit
                          - key: app.kubernetes.io/component
                            operator: In
                            values:
                              - api
                      topologyKey: "kubernetes.io/hostname"
            containers:
            - env: null
              envFrom: []
              image: graviteeio/cockpit-management-api:1.0.0-app
              imagePullPolicy: Always
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 30
                periodSeconds: 30
                tcpSocket:
                  port: api-http
              name: my-cockpit-api
              ports:
              - containerPort: 8063
                name: api-http
              - containerPort: 8062
                name: api-ws
              - containerPort: 18063
                name: api-technical
              readinessProbe:
                failureThreshold: 3
                initialDelaySeconds: 30
                periodSeconds: 30
                tcpSocket:
                  port: api-http
              resources:
                limits:
                  cpu: 500m
                  memory: 1024Mi
                requests:
                  cpu: 200m
                  memory: 512Mi
              securityContext:
                runAsNonRoot: true
                runAsUser: 1001
              volumeMounts:
              - mountPath: /opt/gravitee-cockpit-management-api/config/gravitee.yml
                name: config
                subPath: gravitee.yml
              - mountPath: /opt/gravitee-cockpit-management-api/config/hazelcast.xml
                name: config
                subPath: hazelcast.xml
              - mountPath: /opt/gravitee-cockpit-management-api/config/hazelcast.yml
                name: config
                subPath: hazelcast.yml
              - mountPath: /opt/gravitee-cockpit-management-api/config/logback.xml
                name: config
                subPath: logback.xml
            nodeSelector: {}
            topologySpreadConstraints: []
            serviceAccountName: my-cockpit-cockpit
            terminationGracePeriodSeconds: 30
            tolerations: []
            volumes:
              - configMap:
                  name: my-cockpit-api
                name: config

  - it: should configure replicas if autoscaling is disabled
    template: api/api-deployment.yaml
    set:
      api:
        autoscaling:
          enabled: false
        replicaCount: 2
    release:
      name: my-cockpit
      namespace: unittest
    chart:
      version: 1.0.0-chart
      appVersion: 1.0.0-app
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Deployment
      - equal:
          path: spec.replicas
          value: 2

  - it: should configure revisionHistoryLimit
    template: api/api-deployment.yaml
    set:
      api:
        deployment:
          revisionHistoryLimit: 10
    release:
      name: my-cockpit
      namespace: unittest
    chart:
      version: 1.0.0-chart
      appVersion: 1.0.0-app
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Deployment
      - equal:
          path: spec.revisionHistoryLimit
          value: 10

  - it: Deploy with managed ServiceAccount
    template: api/api-deployment.yaml
    set:
      cockpit:
        managedServiceAccount: true
        serviceAccount: ""
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.serviceAccountName
          value: "RELEASE-NAME-cockpit"

  - it: Deploy with custom ServiceAccount
    template: api/api-deployment.yaml
    set:
      cockpit:
        managedServiceAccount: false
        serviceAccount: "test-sa"
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.serviceAccountName
          value: "test-sa"

  - it: Deploy without ServiceAccount
    template: api/api-deployment.yaml
    set:
      cockpit:
        managedServiceAccount: false
        serviceAccount: ""
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.serviceAccountName
          value: null

  - it: Deploy with managed custom ServiceAccount
    template: api/api-deployment.yaml
    set:
      cockpit:
        managedServiceAccount: true
        serviceAccount: "test-sa"
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Deployment
      - equal:
          path: spec.template.spec.serviceAccountName
          value: "test-sa"
