suite: test that API configmap will contain the right entrypoints
templates:
  - "api/api-configmap.yaml"
tests:
  - it: shouldn't have API entrypoint (missing values imply default values into java code)
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: ConfigMap
      - notMatchRegex:
          path: data.[gravitee.yml]
          pattern: "[ ]{4}entrypoint:.*"

  - it: should have custom API entrypoint
    set:
      api:
        http:
          api:
            entrypoint: /custom/path/mng
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: ConfigMap
      - matchRegex:
          path: data.[gravitee.yml]
          pattern: "[ ]{4}entrypoint: /custom/path/mng"

  - it: should have notifier with default settings
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: ConfigMap
      - matchRegex:
          path: data.[gravitee.yml]
          pattern: "[ ]{4}tryAvoidDuplicateNotification: true"
      - matchRegex:
          path: data.[gravitee.yml]
          pattern: "[ ]{2}certificates:[ ]*"
      - matchRegex:
          path: data.[gravitee.yml]
          pattern: "[ ]{4}expiryThresholds: 20,15,10,5,1"
      - matchRegex:
          path: data.[gravitee.yml]
          pattern: "[ ]{4}expiryEmailSubject: \"Certificate will expire soon\""

  - it: should have notifier with custom settings
    set:
      api.services.certificate.expiryThresholds: 30,20,10,5,1
      api.services.certificate.expiryEmailSubject: "TEST CUSTOM SUBJECT"

    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: ConfigMap
      - matchRegex:
          path: data.[gravitee.yml]
          pattern: "[ ]{4}tryAvoidDuplicateNotification: true"
      - matchRegex:
          path: data.[gravitee.yml]
          pattern: "[ ]{2}certificates:[ ]*"
      - matchRegex:
          path: data.[gravitee.yml]
          pattern: "[ ]{4}expiryThresholds: 30,20,10,5,1"
      - matchRegex:
          path: data.[gravitee.yml]
          pattern: "[ ]{4}expiryEmailSubject: \"TEST CUSTOM SUBJECT\""

  - it: should have custom settings for email notifier
    set:
      api.notifiers.email.enabled: true
      api.notifiers.email.host: custom.smtp.example.com
      api.notifiers.email.port: 256
      api.notifiers.email.from: custom-info@example.com
      api.notifiers.email.username: custom-info@example.com
      api.notifiers.email.password: custom-example.com
      api.notifiers.email.startTLSEnabled: true
      api.notifiers.email.sslTrustAll: false
      api.notifiers.email.sslKeyStore: /path/to/custom-keystore
      api.notifiers.email.sslKeyStorePassword: mypassword

    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: ConfigMap
      - matchRegex:
          path: data.[gravitee.yml]
          pattern: "[ ]{4}host: custom.smtp.example.com"
      - matchRegex:
          path: data.[gravitee.yml]
          pattern: "[ ]{4}port: 256"
      - matchRegex:
          path: data.[gravitee.yml]
          pattern: "[ ]{4}from: custom-info@example.com"
      - matchRegex:
          path: data.[gravitee.yml]
          pattern: "[ ]{4}username: custom-info@example.com"
      - matchRegex:
          path: data.[gravitee.yml]
          pattern: "[ ]{4}password: custom-example.com"
      - matchRegex:
          path: data.[gravitee.yml]
          pattern: "[ ]{4}startTLSEnabled: true"
      - matchRegex:
          path: data.[gravitee.yml]
          pattern: "[ ]{4}sslKeyStore: /path/to/custom-keystore"
      - matchRegex:
          path: data.[gravitee.yml]
          pattern: "[ ]{4}sslKeyStorePassword: mypassword"


  - it: should have custom settings for user management
    set:
      userManagement.resetPassword.token: 300
      userManagement.mfaChallenge.token: 360
      userManagement.password.policy.pattern: testpattern
      userManagement.email.policy.pattern: testemailpattern
      userManagement.name.policy.pattern: testnamepattern
      userManagement.username.policy.pattern: testusernamepattern

    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: ConfigMap
      - matchRegex:
          path: data.[gravitee.yml]
          pattern: "[ ]{4}token: 300"
      - matchRegex:
          path: data.[gravitee.yml]
          pattern: "[ ]{4}token: 360"
      - matchRegex:
          path: data.[gravitee.yml]
          pattern: "[ ]{6}pattern: testpattern"
      - matchRegex:
          path: data.[gravitee.yml]
          pattern: "[ ]{6}pattern: testemailpattern"
      - matchRegex:
          path: data.[gravitee.yml]
          pattern: "[ ]{6}pattern: testnamepattern"
      - matchRegex:
          path: data.[gravitee.yml]
          pattern: "[ ]{6}pattern: testusernamepattern"