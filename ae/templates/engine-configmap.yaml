{{- if and (.Values.engine.enabled) (not (include "engine.externalConfig" .)) -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "gravitee.engine.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ template "gravitee.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Values.engine.image.tag | default .Chart.AppVersion | quote }}
    app.kubernetes.io/component: "{{ .Values.engine.name }}"
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
data:
  gravitee.yml: |
    ingesters:
      ws:
    #    instances: 0
        port: {{ .Values.engine.service.internalPort }}
    #    host: 0.0.0.0
    #    alpn: false
        {{- if .Values.engine.ssl.enabled }}
        secured: true
        ssl:
          keystore:
            path: {{ .Values.engine.ssl.keystore.path }}
            password: {{ .Values.engine.ssl.keystore.password | quote }}
          clientAuth: {{ .Values.engine.ssl.clientAuth }}
          {{- if .Values.engine.ssl.truststore }}
          truststore:
            path: {{ .Values.engine.ssl.truststore.path }}
            password: {{ .Values.engine.ssl.truststore.password | quote }}
          {{- end }}
        {{- else }}
        secured: false
        {{- end }}
        authentication: # authentication type to be used for HTTP authentication
          {{- if .Values.engine.authentication.enabled }}
          type: basic
          users:
            admin: {{ .Values.engine.authentication.adminPassword }}
          {{- else }}
          type: none
          {{- end }}

    services:
      core:
        http:
          enabled: {{ .Values.engine.services.core.http.enabled | default true }}
          port: {{ .Values.engine.services.core.http.port | default "18072" }}
          host: {{ .Values.engine.services.core.http.host | default "localhost" }}
          authentication:
            type: {{ .Values.engine.services.core.http.authentication.type | default "basic" }}
            users:
              admin: {{ .Values.engine.services.core.http.authentication.password | default "adminadmin"}}

      {{- if .Values.engine.services.metrics.enabled }}
      metrics:
        enabled: {{ .Values.engine.services.metrics.enabled }}
        {{- if .Values.engine.services.metrics.prometheus }}
        prometheus:
{{ toYaml .Values.engine.services.metrics.prometheus | indent 10 }}
        {{- end }}
      {{- end }}

    cluster:
      hazelcast:
        config:
          path: ${gravitee.home}/config/hazelcast.xml
      sync:
        time:
          value: {{ ((((.Values.engine.cluster).sync).time).value) | default 30 }}
          unit: {{ ((((.Values.engine.cluster).sync).time).unit) | default "SECONDS" | quote }}


  hazelcast.xml: |
    <?xml version="1.0" encoding="UTF-8"?>

    <hazelcast xmlns="http://www.hazelcast.com/schema/config"
               xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
               xsi:schemaLocation="http://www.hazelcast.com/schema/config
               http://www.hazelcast.com/schema/config/hazelcast-config-4.1.xsd">

        <cluster-name>graviteeio-ae</cluster-name>

        <properties>
            <property name="hazelcast.discovery.enabled">true</property>
            <property name="hazelcast.max.wait.seconds.before.join">3</property>
            <property name="hazelcast.member.list.publish.interval.seconds">5</property>
            <property name="hazelcast.socket.client.bind.any">false</property>
        </properties>

        <partition-group enabled="true" group-type="NODE_AWARE"/>

        <topic name="events">
            <multi-threading-enabled>true</multi-threading-enabled>
        </topic>

        <!-- Keep the queue config for backward compatibility -->
        <queue name="channel_*">
            <backup-count>0</backup-count>
            <async-backup-count>1</async-backup-count>
        </queue>

        <reliable-topic name="channel_*">
            <read-batch-size>10</read-batch-size>
        </reliable-topic>

        <map name="cache-properties">
            <time-to-live-seconds>30</time-to-live-seconds>
            <max-idle-seconds>30</max-idle-seconds>
            <eviction size="1000"/>
        </map>

        <map name="dampenings">
            <backup-count>0</backup-count>
            <async-backup-count>1</async-backup-count>
        </map>

        <map name="buckets">
            <backup-count>0</backup-count>
            <async-backup-count>1</async-backup-count>
        </map>

        <network>
            <join>
                <multicast enabled="false"/>
                <tcp-ip enabled="false"/>
                <kubernetes enabled="true">
                    <namespace>{{ .Release.Namespace }}</namespace>
                    <service-name>{{ template "gravitee.engine.fullname" . }}</service-name>
                </kubernetes>
            </join>
        </network>
    </hazelcast>
{{- if .Values.engine.logging.debug }}
  logback.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <!--
        ~ Copyright (c) 2015-2016, The Gravitee team (http://www.gravitee.io)
        ~
        ~  Licensed under the Apache License, Version 2.0 (the "License");
        ~  you may not use this file except in compliance with the License.
        ~  You may obtain a copy of the License at
        ~
        ~  http://www.apache.org/licenses/LICENSE-2.0
        ~
        ~  Unless required by applicable law or agreed to in writing, software
        ~  distributed under the License is distributed on an "AS IS" BASIS,
        ~  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        ~  See the License for the specific language governing permissions and
        ~  limitations under the License.
    -->
    <configuration>
        <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
            <!-- encoders are assigned the type
                  ch.qos.logback.classic.encoder.PatternLayoutEncoder by default -->
            <encoder>
                <pattern>{{ .Values.engine.logging.stdout.encoderPattern }}</pattern>
            </encoder>
        </appender>
        {{- if .Values.engine.logging.file.enabled }}
        <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <file>${gravitee.home}/logs/gravitee.log</file>
            {{ .Values.engine.logging.file.rollingPolicy | indent 16 }}
            <encoder>
              <pattern>{{ .Values.engine.logging.file.encoderPattern }}</pattern>
            </encoder>
        </appender>
        {{- end }}
  
        {{- if .Values.engine.logging.file.enabled }}
        <appender name="async-file" class="ch.qos.logback.classic.AsyncAppender">
            <appender-ref ref="FILE" />
        </appender>
        {{- end }}
  
        <appender name="async-console" class="ch.qos.logback.classic.AsyncAppender">
            <appender-ref ref="STDOUT" />
        </appender>
  
        <logger name="com.graviteesource" level="{{ .Values.engine.logging.graviteeLevel }}" />
        <logger name="org.reflections" level="WARN" />
        <logger name="org.springframework" level="WARN" />
        <logger name="com.hazelcast" level="WARN" />
  
        <!-- Strictly speaking, the level attribute is not necessary since -->
        <!-- the level of the root level is set to DEBUG by default.       -->
        <root level="INFO">
            <appender-ref ref="async-console" />
            {{- if .Values.engine.logging.file.enabled }}
            <appender-ref ref="async-file" />
            {{- end }}
        </root>
    </configuration>
{{- end -}}
{{- end -}}
